#malware_pre.py
from tkinter import Tk, filedialog
import pandas as pd
import joblib

# Load the trained model and label encoder
model = joblib.load('malware_detection_model.joblib')
label_encoder = joblib.load('label_encoder.joblib')

# Function to preprocess the file features
def preprocess_file_features(file_content):
    features = ['millisecond', 'state', 'usage_counter', 'prio', 'static_prio',
                'normal_prio', 'policy', 'vm_pgoff', 'vm_truncate_count', 
                'task_size', 'cached_hole_size', 'free_area_cache', 'mm_users', 
                'map_count', 'hiwater_rss', 'total_vm', 'shared_vm', 'exec_vm', 
                'reserved_vm', 'nr_ptes', 'end_data', 'last_interval', 'nvcsw', 
                'nivcsw', 'min_flt', 'maj_flt', 'fs_excl_counter', 'lock', 
                'utime', 'stime', 'gtime', 'cgtime', 'signal_nvcsw']

    
    if file_content.strip():
        file_features = [float(feature) for feature in file_content.split(',')]

        if len(file_features) < len(features):
            remaining_features = len(features) - len(file_features)
            file_features += [1.0] * remaining_features

        X_new = pd.DataFrame(columns=features, dtype=float)
        X_new.loc[0] = file_features
        return X_new
    else:
        return None

# Function to predict if a file is malware given its features
def predict_malware(file_path):
    X_new = preprocess_file_features(file_path)

    if X_new is None:
        return "File is empty"

    prediction = model.predict(X_new)
    prediction_label = label_encoder.inverse_transform(prediction)[0]

    return prediction_label

def select_file_and_predict(file_content):
    prediction = predict_malware(file_content)
    return prediction

